% \iffalse meta-comment
% http://www.texdev.net/2009/10/06/a-model-dtx-file/
% !TEX program  = xelatex
%<*internal>
\iffalse
%</internal>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
-----------------------------------------------------------------------------
leincalc.dtx --- macros to typeset calculus documents
E-mail: leingang@nyu.edu
All rights reserved.
-----------------------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2013-18 by Matthew Leingang <leingang@nyu.edu>

This work consists of the file  leincalc.dtx
and the derived files           leincalc.sty
                                leincalc.ins
                                leincalc.bib
                                leincalc.pdf

\endpostamble
%<install>\UseTDS
\usedir{tex/latex}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble
\nopostamble
\generate{
  \file{\jobname.bib}{\from{\jobname.dtx}{bibliography}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
%<*package>
% Keep version numbering separate from CDS.tex version numbering
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{leincalc}[2019/06/16 v0.3.1 Calculus macros]
%</package>
%<*driver>
\documentclass{amsdtx}
% \cls{amsdtx} derives from \cls{book}, which make the bibliography a chapter rather than a section.
% So I need to re-define it.
\makeatletter
\newcommand{\refname}{Bibliography}
\renewenvironment{thebibliography}[1]
     {\section*{\refname}%
      \@mkboth{\MakeUppercase\refname}{\MakeUppercase\refname}%
      \list{\@biblabel{\@arabic\c@enumiv}}%
           {\settowidth\labelwidth{\@biblabel{#1}}%
            \leftmargin\labelwidth
            \advance\leftmargin\labelsep
            \@openbib@code
            \usecounter{enumiv}%
            \let\p@enumiv\@empty
            \renewcommand\theenumiv{\@arabic\c@enumiv}}%
      \sloppy
      \clubpenalty4000
      \@clubpenalty \clubpenalty
      \widowpenalty4000%
      \sfcode`\.\@m}
     {\def\@noitemerr
       {\@latex@warning{Empty `thebibliography' environment}}%
      \endlist}
\makeatother
\usepackage[letterpaper]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage{\jobname}

% Code examples (issue #2)
\usepackage{ydoc-expl}
\usepackage[most]{tcolorbox}
\usepackage{etoolbox}
\lstset{backgroundcolor=\color{blue!10}}
\input{svgnam.def}
% Use a dogeared color box like tcolorbox's marker style <http://tex.stackexchange.com/a/307436/1402>
\newtcolorbox{marker}[1][]{enhanced,
    before skip=2mm,after skip=3mm,
    boxrule=0.4pt,left=5mm,right=2mm,top=1mm,bottom=1mm,
    colframe=LightGoldenrodYellow!50!black,
    colback=LightGoldenrodYellow,
    width=1cm+\wd\exampleresultbox,
    halign=center,
    sharp corners,rounded corners=northeast,arc is angular,arc=3mm,
    underlay={%
    \path[fill=tcbcol@back!80!black]
        ([xshift=-3mm]interior.north east)--++(0,-0.3)--++(0.3,0);
    \path[draw=tcbcol@frame,shorten <=-0.05mm,shorten >=-0.05mm]
        ([xshift=-3mm]interior.north east)--++(0,-0.3)--++(0.3,0);
    },
    drop fuzzy shadow,#1}
\newcommand{\styleresultbox}[1]{%
    \begin{marker}
    \mbox{#1}
    \end{marker}
}

% There are two \cn{fbox}es that need to be patched.
\patchcmd{\PrintExample}{\fbox}{\styleresultbox}{}{}
\patchcmd{\PrintExample}{\fbox}{\styleresultbox}{}{}
% I want to add to the style but don't know how without
% copying
\lstdefinestyle{examplecode}{%
    language=[latex]tex,
    basicstyle=\ttfamily,
    columns=fullflexible,
    numbers=left,
    firstnumber=1,
    numberstyle=\tiny\color{gray}\sffamily,
    numbersep=5pt,
    breaklines,prebreak={\mbox{\tiny$\swarrow$}},
    commentstyle=\color{black!60},
    frame=trbl,
    frameround=tttt
}%

\lstdefinestyle{terminal}{
  language=sh,basicstyle=\ttfamily,emphstyle={\slshape}
}
\lstnewenvironment{lstterm}[1][]{%
    \lstset{
      style=terminal,
      gobble=2,
      #1
    }}
{}



%\usepackage{dtklogos}
%\def\tikz/{\pkg{\protect{\normalfont Ti\textit{k}Z}}}
%\def\pgf/{\pkg{\protect{\normalfont\textsc{pgf}}}}
%\def\pgfplots/{\pkg{\protect{\normalfont\textsc{pgfplots}}}}
\def\xetex/{\protect{\XeTeX}}
\makeatletter
\DeclareRobustCommand{\tk}{\category@index{TikZ key}}
\DeclareRobustCommand{\coolkey}{\category@index{COOL key}}
\makeatother
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%\GetFileInfo{leincalc.sty}
%
% \title{Macros for typesetting calculus documents}
% \author{Matthew Leingang\thanks{Email: leingang@nyu.edu}}
% \date{Released \filedate\thanks{Version: \fileversion}}
% 
% \maketitle
% \tableofcontents
% \changes{v0.1}{2013/11/11}{First use of the leincalc style?}
% \changes{v0.2}{2018/10/03}{l3build packaging}
% \changes{v0.3.0}{2019/06/16}{Added installation documentation}
%
% \StopEventually{^^A
%   \PrintChanges
%   \PrintIndex
% }
%
%
% \section{Introduction}
%
% \section{Installation}
% 
% If you have the git repository, and a \TeX-live installation,
% type this at the command line: 
%
% \begin{lstterm}
% $ l3build install --full
% \end{lstterm}  
%
% This should install the package in a place that your TeX installation
% can find it and also that you can write to.  The \texttt{--full} 
% option also installs documentation.  
%
% \section{Usage/Implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
%
%    \begin{macrocode}
\RequirePackage{mathtools}
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% \subsection{Textbook styles}
%
% One major goal of the package is to separate content and presentation.
% This way notation can be adapted from one textbook to another without
% changing document-level commands.
%
%    \begin{macrocode}
\newbool{stewart}
\newbool{marsdentromba}
\DeclareOption{Stewart}{}
\DeclareOption{MarsdenTromba}{\booltrue{marsdentromba}}
\ExecuteOptions{Stewart}
\ProcessOptions\relax
%    \end{macrocode}
%
% \subsection{Constants}
%
% \begin{macro}{\Z}
% \begin{macro}{\Q}
% \begin{macro}{\R}
% Integers, rational numbers, real numbers
% \begin{example}
% \begin{examplecode}
%    $\Z$, $\Q$, $\R$
% \end{examplecode}
% \end{example}
%    \begin{macrocode}
\providecommand{\Z}{\mathbb{Z}}
\providecommand{\Q}{\mathbb{Q}}
\providecommand{\R}{\mathbb{R}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}

%
% \subsection{Numbers and units}
%
% We use the \pkg{siunitx} package, which provides a stunning degree of control
% over how numbers are formatted.  Also, macros for all types of units, following
% SI recommendations.  
%
% But we can also declare imperial units.
%
%    \begin{macrocode}
\RequirePackage{siunitx}
\sisetup{per-mode=symbol}
\DeclareSIUnit\mile{mi}
\DeclareSIUnit\pound{lb}
\DeclareSIUnit\inch{in}
\DeclareSIUnit\foot{ft}
\DeclareSIUnit{\gallon}{gal}
\DeclareSIUnit{\year}{yr}% IAU suggests "a" for "annum" but I don't care.
%    \end{macrocode}
%
% \subsection{COOL Math}
%
% This is an old package but very useful.  It provides a Common, Object-Oriented
% Language for lots of mathematical expressions.
%
%    \begin{macrocode}
\let\Tr\relax
\RequirePackage{cool}%%
\RequirePackage{makerobust}
%    \end{macrocode}
% I was alerted to the \pkg{cool} (COntent Oriented \latex/) package by the users at the \tex/ StackExchange.\footnote{specifically, by user Torbjorn T.}
% It provides macros for describing math in a content-oriented format sort of like Mathematica does,
% and styles for specifying how the math should be rendered.
%    \begin{macrocode}
\RequirePackage{cool}
%    \end{macrocode}
% I have customized the code in a couple of ways.
% 
% \subsubsection{Local cool styles}
%
% This is a hack of the \cn{COOL@keyeater} command from \fn{cool.sty} which replaces \cn{gdef} with a regular \cn{def}.
%    \begin{macrocode}
\def\COOL@keyeater#1=#2,#3\COOL@keyend{%
\ifx#3\COOL@keystop%
\expandafter\def\csname COOL@notation@#1\endcsname{#2}%
\else%
\expandafter\def\csname COOL@notation@#1\endcsname{#2}%
\COOL@keyeater#3\COOL@keyend%
\fi%
}
%    \end{macrocode}
%
% \subsubsection{Inverse trigonometric functions}
% 
% \begin{macro}{\ArcCot}
% \begin{macro}{\ArcSec}
% \begin{macro}{\ArcCsc}
% The \pkg{cool} package provides a key \coolkey{ArcTrig} which determines whether the inverse trigonometric functions are set with  $-1$ superscripts (with the \texttt{inverse} value) or ``arc'' prefixes (with the \texttt{arc} value).
% For example, $\sin^{-1}$ vs. $\arcsin$.
% The only inverse trigonometric functions for which this key is checked are \cn{ArcSin}, \cn{ArcCos}, and \cn{ArcTan}.
% So I re-implement \cn{ArcSec}, \cn{ArcCsc}, and \cn{ArcCot}.
%
% \begin{example}
% \begin{examplecode}
%    \(
%       \Style{ArcTrig=arc}
%       \begin{aligned}
%         \ArcSin{1} &= \frac{\pi}{2}  \\
%         \ArcCos{1} &= 0                  \\
%         \ArcTan{1} &= \frac{\pi}{4}  \\
%         \ArcCot{1} &= \frac{\pi}{4}  \\
%         \ArcSec{1} &= 0                  \\
%         \ArcCsc{1} &= \frac{\pi}{2}  \\
%       \end{aligned}
%    \)
% \end{examplecode}
% \caption{Inverse trigonometric functions}
% \label{exam-invtrig}
% \end{example}
%
%    \begin{macrocode}
\newcommand{\COOL@switch@arctrig}[2]{%
    \ifthenelse{\equal{\COOL@notation@ArcTrig}{inverse}}{#1}{%
        \ifthenelse{\equal\COOL@notation@ArcTrig{arc}}{#2}{%
            \PackageError{cool}{Invalid ArcTrig option: can be only `arc' or `inv'}%
        }%
    }
}
\renewcommand{\ArcCot}[1]{%
    \COOL@switch@arctrig{\cot^{-1}}{\operatorname{arccot}}%
    \COOL@decide@paren{ArcTan}{#1}%
}
\renewcommand{\ArcSec}[1]{%
    \COOL@switch@arctrig{\sec^{-1}}{\operatorname{arcsec}}%
    \COOL@decide@paren{ArcSec}{#1}%
}
\renewcommand{\ArcCsc}[1]{%
    \COOL@switch@arctrig{\csc^{-1}}{\operatorname{arccsc}}%
    \COOL@decide@paren{ArcCsc}{#1}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsubsection{Powers of trig functions}
%
%
% \begin{macro}{\Sin}
% \begin{macro}{\Cos}
% \begin{macro}{\Tan}
% \begin{macro}{\Cot}
% \begin{macro}{\Sec}
% \begin{macro}{\Csc}
% \begin{macro}{\Sinh}
% \changes{v0.2.4}{2015/03/13}{Made power-sensitive}
% \begin{macro}{\Cosh}
% \changes{v0.2.4}{2015/03/13}{Made power-sensitive}
% I want to write \verb|$\Sin{x}^2$| and get the same result as \verb|$\sin^2(x)$|.
% That seems like the \pkg{cool} way.
% 
%:TODO Make this a style implemented with a key.
%:TODO Someday make this \href{http://en.wikipedia.org/wiki/Don't_repeat_yourself}{DRY}.  Not today.
%
%    \begin{macrocode}
\let\COOL@Sin@Nopower\Sin
\let\COOL@Cos@Nopower\Cos
\let\COOL@Tan@Nopower\Tan
\let\COOL@Cot@Nopower\Cot
\let\COOL@Sec@Nopower\Sec
\let\COOL@Csc@Nopower\Csc

\def\Sin#1{\@ifnextchar^{\COOL@Sin@Power{#1}}{\COOL@Sin@Nopower{#1}}}
\def\Cos#1{\@ifnextchar^{\COOL@Cos@Power{#1}}{\COOL@Cos@Nopower{#1}}}
\def\Tan#1{\@ifnextchar^{\COOL@Tan@Power{#1}}{\COOL@Tan@Nopower{#1}}}
\def\Cot#1{\@ifnextchar^{\COOL@Cot@Power{#1}}{\COOL@Cot@Nopower{#1}}}
\def\Sec#1{\@ifnextchar^{\COOL@Sec@Power{#1}}{\COOL@Sec@Nopower{#1}}}
\def\Csc#1{\@ifnextchar^{\COOL@Csc@Power{#1}}{\COOL@Csc@Nopower{#1}}}

\def\COOL@Sin@Power#1^#2{\sin^{#2}\COOL@decide@paren{Sin}{#1}}
\def\COOL@Cos@Power#1^#2{\cos^{#2}\COOL@decide@paren{Cos}{#1}}
\def\COOL@Tan@Power#1^#2{\tan^{#2}\COOL@decide@paren{Tan}{#1}}
\def\COOL@Cot@Power#1^#2{\cot^{#2}\COOL@decide@paren{Cot}{#1}}
\def\COOL@Sec@Power#1^#2{\sec^{#2}\COOL@decide@paren{Sec}{#1}}
\def\COOL@Csc@Power#1^#2{\csc^{#2}\COOL@decide@paren{Csc}{#1}}

\let\COOL@Sinh@Nopower\Sinh
\let\COOL@Cosh@Nopower\Cosh
\def\Sinh#1{\@ifnextchar^{\COOL@Sinh@Power{#1}}{\COOL@Sinh@Nopower{#1}}}
\def\Cosh#1{\@ifnextchar^{\COOL@Cosh@Power{#1}}{\COOL@Cosh@Nopower{#1}}}
\def\COOL@Sinh@Power#1^#2{\sinh^{#2}\COOL@decide@paren{Sinh}{#1}}
\def\COOL@Cosh@Power#1^#2{\cosh^{#2}\COOL@decide@paren{Cosh}{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}

%
% \subsection{Macros for Calculus I}
%
% \begin{macro}{\from}
% Semantic macro separating the name of a function and its domain
% \begin{example}
%    \begin{examplecode}
%        $f \from \R \to \R$
%    \end{examplecode}
% \end{example}
%    \begin{macrocode}
\providecommand{\from}{\colon}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
% Calc I
% L'Hopital's Rule
\newcommand{\Heq}{\stackrel{\text{H}}{=}}

% Calc II
% sequences
\newcommand{\Sequence}[1]{\left\{#1\right\}}
\newcommand{\Seqlist}[1]{\left\{#1\right\}}
%    \end{macrocode}
%
%
% \subsection{Macros for Calculus III}
%
% \begin{macro}{\Point} 
% Name a point by a single symbol.
% Some books typeset these in something other than the default
% math italic.  E.g., Marsden/Tromba use math roman.
%    \begin{macrocode}
\newcommand{\Point}[1]{#1}
\MakeRobustCommand{\Point}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Pointlist}
% Name a point by a list of coordinates.
%    \begin{macrocode}
\newcommand{\COOL@notation@PointlistParen}{p}
\newcommand{\Pointlist}[1]{\COOL@decide@paren{Pointlist}{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Veclist}
% Name a vector by a list of coordinates.    
%    \begin{macrocode}
\newcommand{\COOL@notation@VeclistParen}{ap}
\newcommand{\Veclist}[1]{\COOL@decide@paren{Veclist}{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Vector}
% Name a vector by a single symbol, or a pair of points.
% \begin{example}
% \begin{examplecode}
%    $\Vector{a}$, $\Vector{O,P}$
% \end{examplecode}
% \end{example}
%
%    \begin{macrocode}
\newcommand{\Vector}[1]{%
    \listval{#1}{0}
    \setcounter{COOL@listlen}{\value{COOL@listpointer}}%
    \ifnumequal{\value{COOL@listlen}}{1}{%
        \mathbf{#1}%
    }{%
        \ifnumequal{\value{COOL@listlen}}{2}{%
            \overrightarrow{\listval{#1}{1}\listval{#1}{2}}
        }{%
            \PackageError{CDSmath}
                {Invalid Parameter List}
                {`Vector' has \arabic{COOL@listlen} values in its argument; needs 1 or 2}
        }
    }
}
\MakeRobustCommand{\Vector}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\newcommand{\rowvec}[1]{\left<#1\right>}
\newcommand{\ihat}{\text{\bfseries\upshape{\^\i}}}
\newcommand{\jhat}{\text{\bfseries\upshape{\^\j}}}
% \newcommand{\khat}{\text{\bfseries\upshape{\raisebox{0.35ex}{\^{\phantom{k}}}\llap{k}}}}
% poor man's carat.  See http://tex.stackexchange.com/a/49321/1402
\newcommand\pmc[1]{\sbox0{#1}\dimen0=\ht0 \advance\dimen0 -1ex
  \sbox2{\^{}}\sbox2{\raise\dimen0\box2}%
  {\ooalign{\hidewidth\box2\hidewidth\cr\box0\crcr}}}
\newcommand{\khat}{\text{\bfseries{\upshape{\pmc{k}}}}}
\newcommand{\Norm}[1]{\left|#1\right|}
\newcommand{\Proj}{\operatorname{proj}}
\newcommand{\Comp}{\operatorname{comp}}
\newcommand{\Plane}[1]{\mathit{#1}}
% Hessian
\newcommand{\Hessian}[1]{\mathcal{H}#1}
\newcommand{\grad}{\operatorname{grad}}
\newcommand{\dvg}{\operatorname{div}}
\newcommand{\curl}{\operatorname{curl}}
%\newcommand{\Grad}[1]{\nabla #1}
\newcommand{\Dvg}[1]{\nabla \cdot #1}
%\newcommand{\Curl}[1]{\nabla\times #1}
\newcommand{\GTeq}{\stackrel{\mathclap{\text{Green}}}{=}}
\providecommand{\Vol}{\operatorname{Vol}}
%    \end{macrocode}
%
% \subsection{PackageOption: Marsden/Tromba Style}
%
% These macros alter the style for the Marsden and Tromba Vector 
% Calculus text.
%
%:TODO Re-implement with PGF keys.
% \changes{unrelease}{2019/02/26}{Change \cn{Hessian} to math italic style}
% 
%    \begin{macrocode}
\ifbool{marsdentromba}{
    \renewcommand{\COOL@notation@VeclistParen}{p}
    \renewcommand{\Point}[1]{
        \listval{#1}{0}
        \setcounter{COOL@listlen}{\value{COOL@listpointer}}%
        \ifnumequal{\value{COOL@listlen}}{1}{%
            \mathrm{#1}%
        }{%
            \left(#1\right)
        }
    }
    \renewcommand{\Plane}[1]{\mathcal{#1}}
    \renewcommand{\ihat}{\Vector{i}}
    \renewcommand{\jhat}{\Vector{j}}
    \renewcommand{\khat}{\Vector{k}}
    \renewcommand{\Norm}[1]{\left\Vert#1\right\Vert}
    \renewcommand{\lim}{\mathop{\operatorname{limit}}}
    \renewcommand{\Hessian}[1]{\mathit{H}#1}
}{}
%    \end{macrocode}
%
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%
% \section{Developer Notes}
% 
% \changes{v0.3.0}{2019/06/16}{Added checklist for version release}
%
% Here is the versioning process:
% 
% \begin{enumerate}
%   \item Edit and make changes.  Use the \cn{changes} macro to record the 
%         dates, but keep the version name \texttt{unreleased}.
%   \item Tag the source files and repository.
%         We use \href{https://semver.org/}{semantic versioning}.  
%         The version tag is a literal \texttt{v} with the version number
%         appended.  The most recent release at the time of this writing 
%         is 0.3.0, so the tag is \texttt{v0.3.0}.
%
%         To get the current version, use the shell command
%         \lstinline[style=terminal]!git tag! and look for the most recent
%         version tag. Alternatively, the \cn{ProvidesPackage} line at the
%         top of this file provides the version number.
%
%         If \texttt{\textsl{newtag}} is the tag name for the next version, 
%         run:
% \begin{lstterm}[emph={newtag}]
% $ l3build tag newtag
% \end{lstterm}
% 
%         \texttt{l3build} will reject an invalid tag name, and won't tag a
%         dirty working directory.  Assuming those checks are passed, the 
%         source files will be updated with the new version name and date.
%         This includes marking all \texttt{unreleased} changes with the new
%         version name.  The new files will be committed, and the repository
%         tagged.  
%
%   \item To push changes to github, run
% \begin{lstterm}
% $ git push
% $ git push --tags
% \end{lstterm}
% \end{enumerate}
%
%% \bibliographystyle{abbrv}
%% \bibliography{\jobname}
%
% \Finale
% \endinput
%
%% \bibliographystyle{abbrv}
%% \bibliography{\jobname}
%
% \Finale
% \endinput
%<*bibliography>
%</bibliography>
